import pandas as pd
import tkinter as tk
from tkinter import messagebox
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier

def load_data():
    df = pd.read_csv("C:/Users/saura/Downloads/spam/spam.csv", encoding="latin-1")
    df = df[['v1', 'v2']]
    df.columns = ['label', 'message']
    df['label'] = df['label'].map({'ham': 0, 'spam': 1})
    df['message'] = df['message'].str.lower().str.replace(r'[^\w\s]', '', regex=True)
    return df

def train_model():
    df = load_data()
    X = df['message']
    y = df['label']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    vectorizer = TfidfVectorizer(stop_words='english')
    X_train_transformed = vectorizer.fit_transform(X_train)
    X_test_transformed = vectorizer.transform(X_test)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train_transformed, y_train)

    return model, vectorizer

def create_gui(model, vectorizer):
    def predict():
        message = entry.get()
        if message.strip() == "":
            messagebox.showwarning("Input Error", "Please enter a message.")
            return

        message_transformed = vectorizer.transform([message.lower()])
        prediction = model.predict(message_transformed)
        result = "Spam" if prediction[0] == 1 else "Not Spam"
        messagebox.showinfo("Prediction Result", f"The message is classified as: {result}")

    # Window Configuration
    root = tk.Tk()
    root.title("FUTURISTIC'S Spam Detection System")
    root.geometry("500x400")
    root.config(bg="#b9b9b9")  # Set background color

    # Header
    header_label = tk.Label(
        root, text="Is This Spam ?", font=("Helvetica", 24, "bold"), bg="#b9b9b9", fg="#333"
    )
    header_label.pack(pady=20)

    # Input Label
    message_label = tk.Label(
        root, text="Enter the message :", font=("Helvetica", 14), bg="#b9b9b9", fg="#333"
    )
    message_label.pack(pady=10)

    # Message Entry
    entry = tk.Entry(root, width=40, font=("Helvetica", 14), bd=3, relief="groove")
    entry.pack(pady=10)

    # Predict Button
    predict_button = tk.Button(
        root, text="Predict", font=("Helvetica", 14), bg="#606060", fg="white", activebackground="#606060",
        command=predict, relief="raised", bd=4, width=15
    )
    predict_button.pack(pady=20)

    # Footer
    footer_label = tk.Label(
        root, text="Spam or Not Spam ? FUTURISTIC made for you!", font=("Helvetica", 10, "italic"), bg="#b9b9b9", fg="#0d0d0d"
    )
    footer_label.pack(side="bottom", pady=10)

    root.mainloop()

if __name__ == "__main__":
    model, vectorizer = train_model()
    create_gui(model, vectorizer)
